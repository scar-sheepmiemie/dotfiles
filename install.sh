#!/bin/bash

# ==============================================================================
# The Ultimate Dotfiles Installer v4 by CircuIT
#
# This version respects existing global Git configurations. It will create a
# minimal ~/.gitconfig only if one does not exist, and will safely append
# the conditional include rule.
# ==============================================================================

set -e

# --- Configuration ---
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
# .gitconfig is no longer linked from the repo.
FILES_TO_LINK=(
  ".zshrc"
  ".vimrc"
)
# --------------------

# --- Color Definitions & Helper Functions ---
COLOR_GREEN='\033[0;32m'; COLOR_YELLOW='\033[0;33m'; COLOR_BLUE='\033[0;34m'; COLOR_RED='\033[0;31m'; COLOR_RESET='\033[0m'
info() { echo -e "${COLOR_BLUE}[INFO]${COLOR_RESET} $1"; }
success() { echo -e "${COLOR_GREEN}[SUCCESS]${COLOR_RESET} $1"; }
warn() { echo -e "${COLOR_YELLOW}[WARNING]${COLOR_RESET} $1"; }
error() { echo -e "${COLOR_RED}[ERROR]${COLOR_RESET} $1"; }

# --- Setup Functions ---

setup_personal_git_config() {
    info "--- Setting up personal Git config file (~/.gitconfig-personal) ---"
    local personal_config="$HOME/.gitconfig-personal"
    if [ -f "$personal_config" ]; then
        success "Personal Git config file already exists. Skipping creation."
        return
    fi
    info "Please provide your PERSONAL Git identity."
    read -p "Enter your personal Git name: " git_name
    read -p "Enter your personal Git email: " git_email
    echo -e "[user]\n    name = $git_name\n    email = $git_email" > "$personal_config"
    success "Created ~/.gitconfig-personal with your details."
}

create_symlinks() {
    info "--- Creating symbolic links (for .zshrc and .vimrc) ---"
    for file in "${FILES_TO_LINK[@]}"; do
        local source_file="$SCRIPT_DIR/$file"
        local dest_file="$HOME/$file"
        if [ ! -e "$source_file" ]; then warn "Source file not found: $source_file. Skipping."; continue; fi
        if [ -L "$dest_file" ] && [ "$(readlink "$dest_file")" = "$source_file" ]; then
            success "Link for $file already correct."
        else
            if [ -e "$dest_file" ]; then
                info "Backing up existing file: $dest_file -> ${dest_file}.bak"
                mv "$dest_file" "${dest_file}.bak"
            fi
            info "Creating symlink: $dest_file -> $source_file"
            ln -s "$source_file" "$dest_file"
        fi
    done
}

# --- THIS IS THE NEW, SAFER GIT CONFIG FUNCTION ---
setup_global_git_config() {
    info "--- Checking and configuring global ~/.gitconfig ---"
    local global_config="$HOME/.gitconfig"
    local include_config_source="$SCRIPT_DIR/.gitconfig-include-personal"

    # Step 1: Ensure a global .gitconfig exists.
    if [ -f "$global_config" ]; then
        success "Found existing global ~/.gitconfig. Will ensure it's configured correctly."
    else
        warn "Global ~/.gitconfig not found. Creating a minimal one."
        # Create a placeholder file
        cat > "$global_config" << EOF
# Auto-generated by the dotfiles installer.
# Please configure your primary (e.g., company) Git identity here:
# git config --global user.name "Your Name"
# git config --global user.email "you@example.com"

[user]

EOF
        success "Created a minimal ~/.gitconfig. Please configure it later."
    fi

    # Step 2: Append the conditional include rule if it's not already there.
    if grep -q "path = ~/.gitconfig-personal" "$global_config"; then
        success "Conditional include rule already exists in ~/.gitconfig. Skipping."
    else
        info "Appending conditional include rule to ~/.gitconfig..."
        echo "" >> "$global_config" # Add a newline for safety
        cat "$include_config_source" >> "$global_config"
        success "Successfully added conditional include rule."
    fi
}

setup_vim() {
    info "--- Setting up Vim and vim-plug ---"
    # ... (This function remains the same as before)
    local plug_vim="$HOME/.vim/autoload/plug.vim"
    if [ -f "$plug_vim" ]; then success "vim-plug is already installed.";
    else
        info "Installing vim-plug...";
        curl -fLo "$plug_vim" --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        success "vim-plug installed."
    fi
    info "Installing Vim plugins using :PlugInstall...";
    vim +PlugInstall +qall
    success "Vim plugins installed (or updated)."
}

setup_zsh() {
    info "--- Setting up Zsh enhancements (fonts & plugins) ---"
    # ... (This function remains the same as before)
    local zsh_setup_script="$SCRIPT_DIR/setup_zsh_enhancements.sh"
    if [ -f "$zsh_setup_script" ]; then
        chmod +x "$zsh_setup_script"
        info "Running Zsh enhancement script..."
        "$zsh_setup_script" --install
    else
        warn "Zsh setup script not found. Skipping this step."
    fi
}

# --- Main Execution ---
main() {
    setup_personal_git_config
    create_symlinks
    setup_global_git_config # <-- The new, safer function
    setup_vim
    setup_zsh

    echo
    success "=============================================================="
    success "                    SETUP COMPLETE!"
    success "=============================================================="
    info "To verify the installation, you can run the following command:"
    echo; info "    bash $SCRIPT_DIR/install.sh --verify"; echo
    info "Final manual steps:"
    info "1. Restart your terminal completely or run: source ~/.zshrc"
    info "2. In your terminal's settings, set the font to 'MesloLGS NF'."
}

# --- Verification Function ---
verify_installation() {
    info "==================== VERIFICATION CHECKLIST ===================="
    local all_ok=true
    # Check 1: Personal Git Config
    info "1. Checking for personal Git config..."
    [ -f "$HOME/.gitconfig-personal" ] && success "   Found ~/.gitconfig-personal" || { error "   Missing ~/.gitconfig-personal"; all_ok=false; }
    # Check 2: Global Git Config
    info "2. Checking for global Git config..."
    [ -f "$HOME/.gitconfig" ] && success "   Found ~/.gitconfig" || { error "   Missing ~/.gitconfig"; all_ok=false; }
    # Check 3: Git Conditional Include
    info "3. Checking for Git conditional include..."
    grep -q "path = ~/.gitconfig-personal" "$HOME/.gitconfig" && success "   Found conditional include rule." || { error "   Missing conditional include rule."; all_ok=false; }
    # Check 4: Symlinks
    info "4. Checking for symbolic links..."
    for file in "${FILES_TO_LINK[@]}"; do
        [ -L "$HOME/$file" ] && success "   Link for $file exists." || { error "   Link for $file is missing."; all_ok=false; }
    done
    # Check 5: Vim-Plug
    info "5. Checking for vim-plug..."
    [ -f "$HOME/.vim/autoload/plug.vim" ] && success "   Found vim-plug." || { error "   vim-plug is not installed."; all_ok=false; }
    # Check 6: Zsh Enhancements
    info "6. Verifying Zsh setup..."
    "$SCRIPT_DIR/setup_zsh_enhancements.sh" --verify
    echo "--------------------------------------------------------------"
    if [ "$all_ok" = true ]; then success "All primary setup verification checks passed!";
    else error "Some verification checks failed. Please review the output above."; fi
}

# --- Argument Parsing ---
if [ "$1" == "--verify" ]; then
    verify_installation
else
    main
fi
